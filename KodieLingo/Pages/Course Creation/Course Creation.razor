@using Services
@using Model
@using Data
@using Microsoft.EntityFrameworkCore
@inject ClientStateService ClientState
@inject NavigationManager navManager
@inject IDbContextFactory<DatabaseContext> ContextFactory;

@page "/CourseCreation/{CourseName?}"

@if(ClientState.User != null && !ClientState.User.IsAdminUser)
{
	<h1>
		You can't be here, bald ding dong.
		Feck oof.
	</h1>
}
else if(CourseName == null || Course == null)
{
	<h1>Edit a course:</h1>
	foreach(Course c in db.Courses)
	{
		<CourseEditSelect Course="c"/>
	}
}
else
{
	<h1>@Course.Name</h1>
}

@code {
	public DatabaseContext? db { get; set; }

	[Parameter]
	public string? CourseName { get; set; }

	public Course? Course { get; set; }

	protected async override Task OnInitializedAsync()
	{
		// Testing component lifecycle events.
		// Only prints when page is initialised, or "built" - 
		// ie, when redirected here from another page.
		// Console.WriteLine("Edit initialised");


		db ??= await ContextFactory.CreateDbContextAsync();
	}

	protected async override Task OnParametersSetAsync()
	{
		// Should call even when this page directs to itself, without a rebuild
		// (unlike the OnInitialised override)
		// Console.WriteLine("Parameters set");



		// See CoursesPage comment.
		if (CourseName != null && CourseName.ToLower() == "c")
		{
			CourseName = "c#";
		}
		if(CourseName != null)
			Course = db.Courses.FirstOrDefault(x => x.Name.ToLower() == CourseName.ToLower());

		// Testing parameter set further
		//StateHasChanged();
	}
}
