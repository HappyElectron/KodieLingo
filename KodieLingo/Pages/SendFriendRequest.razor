@using Model;
@using Services
@using Data;
@using Microsoft.EntityFrameworkCore;

@inject ClientStateService ClientState
@inject IDbContextFactory<DatabaseContext> ContextFactory;

<h4 style="color:white; align-content:center;">@User.Username</h4>
<button style="width: 100%;" @onclick="AddFriend">Send friend request</button>

@code {
	[Parameter]
	public User User { get; set; }

	//[Parameter]
	//public ICollection<User> IncomingRequests { get; set; }

	private DatabaseContext? db { get; set; }

	protected override async Task OnInitializedAsync()
	{
		db ??= await ContextFactory.CreateDbContextAsync();
	}

	private async Task AddFriend()
	{ 
		// This code correctly updates the User data held in server memory,
		// but does not save the DB data (will forget everything by the next session)
		//________________________________________________
		// UPDATE:
		// I thought the issue could be that the relationships were not included:
		// Tried updating this in the user definition. Did not work.

		User.FriendReqIncoming
		.Add(ClientState.User);

		await db.SaveChangesAsync();


		ClientState.User
		.FriendReqOutgoing
		.Add(User);

		await db.SaveChangesAsync();

		/* This throws an error on adding a friend: ""
		* db.Users.First(b => b.Username == User.Username)
		* .FriendReqIncoming
		* .Add(ClientState.User);
		*
		*/
		StateHasChanged();
	}
}
