@using Model;
@using Data;
@using Services;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<DatabaseContext> ContextFactory;
@inject ClientStateService ClientState;
@inject NavigationManager navManager;

<PageTitle>Login - KodieLingo</PageTitle>

<!--
    Site heading, back button
-->
<!DOCTYPE html>
    <html lang="en">

    <body>
        <div class = "kodielingo-text">
            <h1>KodieLingo</h1>
        </div>
        <div class="centered-text">
            <button class="back-button" @onclick="Back">back</button>
        </div>
    </body>
    </html>


@if (!IsValidUser) // Failed login attempt
{
    <h2>Invalid email or password</h2>
    <button @onclick="InvalidUserButton">sowwy</button>
}
else // Login form
{
    <div class="row">
        <div class="col-8">
            <input id="Email"  size="50"name="Email" type="text" placeholder="Enter Email" class="email-box" @bind="@Email">
        </div>
    </div>
    <div class="row">
        <div class="col-8">
            <input id="Password" name="Password" type="text" placeholder="Enter Password" class="password-box" @bind="@Password">
        </div>
    </div>
    <div class="form-group row">
        <div class="offset-4 col-8">
            <button name="Signup" type="Signup" class="login-button" @onclick="LoginUser">Login</button>
        </div>
    </div>
}

@code {
    string Email;
    string Password;
    private bool IsValidUser { get; set; } = true;

    private DatabaseContext? db { get; set; }

    protected async override Task OnInitializedAsync()
    {
        db ??= await ContextFactory.CreateDbContextAsync();
    }

    // Check the user details against the DB; if valid, return the user object.
    public async Task LoginUser()
    {
        if (db.Users.Select(x => x.Email).Contains(Email) && db.Users.Select(x => x.Password).Contains(Password))
        {
            ClientState.User = db.Users.Where(x => x.Email == Email)
            .Include(b => b.Friend)
            .Include(b => b.FriendReqIncoming)
            .FirstOrDefault();
            navManager.NavigateTo("");
        }
        else
        {
            IsValidUser = false;
            StateHasChanged();
        }
    }

    // Return to login/signup prompt
    public void Back()
    {
        navManager.NavigateTo("");
    }

    // Button that appears when user is invalid; just a state toggle.
    public void InvalidUserButton()
    {
        IsValidUser = true;
        StateHasChanged();
    }
}