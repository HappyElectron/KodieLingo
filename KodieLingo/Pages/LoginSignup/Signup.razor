@using Model;
@using Data;
@using Services;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<DatabaseContext> ContextFactory;
@inject ClientStateService ClientState;
@inject NavigationManager navManager;

<PageTitle>Signup - KodieLingo</PageTitle>

<!DOCTYPE html>
    <html lang="en">

    <body>
        <div class = "kodielingo-text">
            <h1>KodieLingo</h1>
        </div>
        <div>
            <button class="back-button" @onclick="Back">back</button>
        </div>
    </body>
    </html>
@if (EmailInUse || UsernameInUse) // If user cannot be found
{
    <div class="centered-text">
        @if(EmailInUse)
        {
            <p>Email in use</p>
        }
        @if(UsernameInUse)
        {
            <p>Username in use</p>
        }
        <button @onclick="InvalidUserButton">sowwy</button> <!--Escape characters form string >uwu<-->
    </div>
}
else if(validUsernamePassword == false)
{
    <div class="centered-text">
        <p>Username or Password are invalid or null</p>
        <button @onclick="InvalidUserButton">sowwy</button> <!--Escape characters form string >uwu<-->
    </div>
}
else
{
    <div class="row">
        <div class="col-8">
            <input id="Email" name="Email" type="text" placeholder="Enter Email" class="email-box" @bind="@email">
        </div>
    </div>
    <div class="row">
        <div class="col-8">
            <input id="Username" name="Username" type="text" placeholder="Create Username" class="username-box" @bind="@username">
        </div>
    </div>
    <div class="row">
        <div class="col-8">
            <input id="Password" name="Password" type="text" placeholder="Create Password" class="password-box" @bind="@password">
        </div>
    </div>
    <div class="form-group row">
        <div class="offset-4 col-8">
            <button name="submit" type="submit" class="signup-button" @onclick="SignupUser">Submit</button>
        </div>
    </div>
}

@code {
    string email;
    string username;
    string password;
    bool validUsernamePassword = true;
    private bool EmailInUse { get; set; } = false;
    private bool UsernameInUse { get; set; } = false;

    private DatabaseContext? db { get; set; }

    protected async override Task OnInitializedAsync()
    {
        db ??= await ContextFactory.CreateDbContextAsync();
    }

    // INCOMPLETE
    // Check the user details against the DB; if valid, return the user object.
    public async Task SignupUser()
    {
        if (username != null && username.Contains(' ') ||username != null && username.Contains(' ') || password != null && password.Contains(' '))
        {
            validUsernamePassword = false;
            return;
        }
        else
        {
            // If username and email do not already exist in the DB, tell them to do better
            if (db.Users.Select(x => x.Username).Contains(username))
            {
                UsernameInUse = true;
                return;
            }
            if (db.Users.Select(x => x.Email).Contains(email))
            {
                EmailInUse = true;
                return;
            }
        }
        // Add the new user to the db, and set the client state
        // ID will auto increment, everything else is either dynamic or allocated a default.
        User newUser = new User()
            {
                Username = username,
                Email = email,
                Password = password
            };
        await db.Users.AddAsync(newUser);
        await db.SaveChangesAsync();
        ClientState.User = ClientState.GetUser(newUser.Email);
        navManager.NavigateTo("");
    }

    // Button that appears when user is invalid; just a state toggle.
    public void InvalidUserButton()
    {
        EmailInUse = false;
        UsernameInUse = false;
        StateHasChanged();
    }
    public void Back()
    {
        navManager.NavigateTo("");
    }
}