@using Model;
@using Services
@using Data;
@using Microsoft.EntityFrameworkCore;

@inject ClientStateService ClientState
@inject IDbContextFactory<DatabaseContext> ContextFactory;

<h4 style="color:white; align-content:center;">@User.Username</h4>
<button style="width: 100%;" @onclick="AddFriend">Send friend request</button>

@code {
	[Parameter]
	public User User { get; set; }


	private DatabaseContext? db { get; set; }

	protected override async Task OnInitializedAsync()
	{
		db ??= await ContextFactory.CreateDbContextAsync();
	}

	private async Task AddFriend()
	{
		// This, somehow, avoids throwing an error. It adds the users to the right lists.
		// However, it does not update the DB with these values. Same problem Finn was having.
		// Fortunately, I am 1,000,000 times better than Finn, so I'll fix it EZ.

		//ClientState.User.FriendReqOutgoing.Add(User);
		//User.FriendReqIncoming.Add(ClientState.User);
		//await db.SaveChangesAsync();

		// Throws a unique UserUser.FriendId error
		//db.Users.First(x => x.Id == ClientState.User.Id).FriendReqOutgoing.Add(User);


		db.Users.First(x => x.Id == User.Id).FriendReqIncoming.Add(ClientState.User);

		await db.SaveChangesAsync();
	}
}
 