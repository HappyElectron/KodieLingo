@using Model;
@using Services
@using Data;
@using Microsoft.EntityFrameworkCore;

@inject ClientStateService ClientState
@inject IDbContextFactory<DatabaseContext> ContextFactory;
@inject NavigationManager NavManager;

<h4 style="color:white; align-content:center;">@User.Username</h4>
<div class="button-container">
<button class="small-button" @onclick="CancelRequest">Cancel?</button>
</div>

<style>
    /* Button for sidebar display selector */
    .button-container {
        display: flex;
        flex-direction: column;
        gap: 10px; /* Adjust the gap value to set the space between buttons */
        margin-top: 10px; /* Add margin to the top to create space between the first button and the nav bar */
        justify-content: center;
    }

    .small-button {
        width: auto; /* Allow the button to adjust its width based on content */
        background-color: white; /*Possible to change color later based on user preference (Dark Mode)*/
        color: black;
        border: 1px solid #00ff9c;
        border-radius: 15px;
        padding: 5px 15px;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .small-button:hover {
            background-color: #00ff9c;
            color: black;
        }
</style>

@code {
	[Parameter]
	public User User { get; set; }

	private DatabaseContext? db { get; set; }

	protected override async Task OnInitializedAsync()
	{
		db ??= await ContextFactory.CreateDbContextAsync();
	}

	private async Task CancelRequest()
	{
		User mainUser = db.Users.Include(x => x.FriendReqOutgoing).First(x => x.Id == ClientState.User.Id);
		User targetUser = db.Users.Include(x => x.FriendReqIncoming).First(x => x.Id == User.Id);

		mainUser.FriendReqOutgoing.Remove(targetUser);
		targetUser.FriendReqIncoming.Remove(mainUser);
		await db.SaveChangesAsync();

		ClientState.User = ClientState.GetUser(mainUser.Email);

		StateHasChanged();
	}
}
