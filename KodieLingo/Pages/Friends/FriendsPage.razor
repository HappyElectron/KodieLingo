﻿@using Model;
@using Data;
@using Services;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<DatabaseContext> ContextFactory;
@inject ClientStateService ClientState;
@inject NavigationManager navManager;


@page "/friends/{FriendUsername?}"


<h3>FriendsPage</h3>

@if (Friend == null)
{
    <h1>
        You're not friends with this guy, bucko.
        Don't fuck with the URL.
    </h1>
}
else if (ClientState.User == null || FriendUsername == null)
{
    @if (ClientState.User.Friend.Count() == 0)
    {
        <h1>Haha no friends</h1>
        <h3>Maybe change that by adding some?</h3>
    }
    else
    {
        <h1> Select one of your friends to view their stats! </h1>
        <h3> (We cannot gurantee they will be checking your stats) </h3>
    }
}
else
{
    <h1> @Friend.Username; </h1>
    <h2>KodieBukz: @Friend.LifetimePoints</h2>
    <h2>Grass touched: 0</h2>
}



@code {
    [Parameter]
    public string? FriendUsername { get; set; }
    private DatabaseContext? db { get; set; }

    private User newFriend = new User();

    private User? Friend => FriendUsername == null ? newFriend :
        db.Users.FirstOrDefault(x => x.Username == FriendUsername && x.Friend.Contains(ClientState.User));


    protected async override Task OnInitializedAsync()
    {
        db ??= await ContextFactory.CreateDbContextAsync();
    }
}
