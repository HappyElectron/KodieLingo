@using Model;
@using Data;
@using Services;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<DatabaseContext> ContextFactory;
@inject ClientStateService ClientState;
@inject NavigationManager navManager;


@page "/friends/{FriendUsername?}"


<h3>FriendsPage</h3>
@if (ClientState.User == null)
{ }
else if (ClientState.User.Friend.Select(x => x.Username).Contains(FriendUsername))
{
    <h1> @Friend.Username; </h1>
    <h2>KodieBukz: @Friend.LifetimePoints</h2>
    <h2>Grass touched: 0</h2>
}
else
{
    @if(ClientState.User.Friend.Count() == 0)
    {
        <h1>Haha no friends</h1>
        <h3>Maybe change that by adding some?</h3>
    }
    else
    {
        <h1> Select one of your friends to view their stats! </h1>
        <h3> (We cannot gurantee they will be checking your stats) </h3>
    }
}


@code {
    [Parameter]
    public string? FriendUsername { get; set; }
    private DatabaseContext? db { get; set; }
    private User? Friend => ClientState.User.Friend.Where(x => x.Username == FriendUsername).FirstOrDefault();
    protected async override Task OnInitializedAsync()
    {
        db ??= await ContextFactory.CreateDbContextAsync();
    }
}