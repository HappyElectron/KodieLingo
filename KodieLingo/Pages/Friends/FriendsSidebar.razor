@using Services
@using Model
@using Data
@using Microsoft.EntityFrameworkCore
@inject ClientStateService ClientState
@inject NavigationManager navManager
@inject IDbContextFactory<DatabaseContext> ContextFactory;

<!--
    Hey guys, in a few spots below I reference existing razor components from script (ie in the AddFriends bit)
    Change the CSS/layout of the tile in the file found under pages/friends, do not attempt to change the appearance from here.
    The user each tile represents is passed as a parameter, from the calling component.
-->
<div class="button-container">
    <button class="custom-button" @onclick="AllFriends">View All Friends</button>
    <button class="custom-button" @onclick="AddAFriend">Add a Friend</button>
    <button class="custom-button" @onclick="IncomingFriendRequests">Incoming Friend Requests</button>
    <button class="custom-button" @onclick="OutgoingFriendRequests">Outgoing Friend Requests</button>
</div>
<style>
    /* Button for sidebar display selector */
    .custom-button {
        width: 100%;
        background-color: #8900ff;
        color: white;
        border: none;
        border-radius: 25px;
        padding: 10px 20px;
        cursor: pointer;
        transition: background-color 0.3s ease; /* Smooth transition for background color */
    }

        .custom-button:hover {
            background-color: #6300ff; /* Darker color on hover */
        }

    .button-container {
        display: flex;
        flex-direction: column;
        gap: 10px; /* Adjust the gap value to set the space between buttons */
        margin-top: 10px; /* Add margin to the top to create space between the first button and the nav bar */
        justify-content: center;
    }

    .small-button {
        background-color: white;
        color: black;
        border: 1px solid #00ff9c;
        border-radius: 15px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .small-button:hover {
            background-color: #00ff9c;
            color: black; /* Change text color to black on hover */
        }
</style>


@if (AddFriendsActive)
{
    <h3 style="color:white">Add a Friend:</h3>
    @foreach (User u in db.Users.
        Include(e => e.FriendReqIncoming).
        Include(e => e.FriendReqOutgoing).
        Include(e => e.Friend).


        Where(
        // Has not already sent/recieved request from user
        b => !b.FriendReqIncoming.Contains(ClientState.User)
        && !b.FriendReqOutgoing.Contains(ClientState.User)
        && !ClientState.User.FriendReqIncoming.Contains(b)
        && !ClientState.User.FriendReqOutgoing.Contains(b)

        // Is not already friends
        && !ClientState.User.Friend.Contains(b)
        && !b.Friend.Contains(ClientState.User)

        // Is not themself
        && b.Username != ClientState.User.Username))
        {
            <SendFriendRequest 
                User="@u"/>
        }
}
else if (IncomingRequestsActive)
{
    <h3 style="color:white">Incoming Friend Requests:</h3>
    <div class="flex-fill">
        @foreach (User r in db.Users.
       Include(e => e.FriendReqIncoming).
       Include(e => e.FriendReqOutgoing).
       Include(e => e.Friend).

       Where(
       // Has sent a friend request to the user
       b => b.FriendReqOutgoing.Contains(ClientState.User)

       // Is not themself
       && b.Username != ClientState.User.Username))
        {
            <IncomingFriendRequest User="@r" />
        }
    </div>
}
else if (OutgoingRequestsActive)
{
    <h3 style="color:white">Outgoing Friend Requests:</h3>
    <div class="flex-fill">
        @foreach (User r in FriendReqOutgoing)
        {
            <OutgoingFriendRequest User="@r"/>
        }
    </div>
}
else
{
    <h2 style="color:white;">Friends:</h2>
    @foreach (User s in db.Users.Where(x => x.Friend.Contains(ClientState.User) 
                                            || ClientState.User.Friend.Contains(x)))
    {<div class="button-container">
            <button class="small-button" @onclick="() => RedirectToFriend(s.Username)">
                @s.Username
            </button>
     </div>
    }
}


@code {
    public DatabaseContext db { get; set; }

    public bool AddFriendsActive { get; set; } = false;
    public bool IncomingRequestsActive { get; set; } = false;
    public bool OutgoingRequestsActive { get; set; } = false;


    public ICollection<User> FriendReqOutgoing {
        get
        {
            return
            db.Users.
       Include(e => e.FriendReqIncoming).
       Include(e => e.FriendReqOutgoing).
       Include(e => e.Friend).

       Where(
       // Has sent a friend request to the user
       b => b.FriendReqIncoming.Contains(ClientState.User)

       // Is not themself
       && b.Username != ClientState.User.Username).ToList();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        db ??= ContextFactory.CreateDbContext();
    }

    private void RedirectToFriend(string url)
    {
        navManager.NavigateTo("/friends/" + url);
    }

    private void IncomingFriendRequests()
    {
        IncomingRequestsActive = !IncomingRequestsActive;
        OutgoingRequestsActive = false;
        AddFriendsActive = false;
    }

    private void OutgoingFriendRequests()
    {
        OutgoingRequestsActive = !OutgoingRequestsActive;
        AddFriendsActive = false;
        IncomingRequestsActive = false;
    }

    private void AddAFriend()
    {
        AddFriendsActive = !AddFriendsActive;
        OutgoingRequestsActive = false;
        IncomingRequestsActive = false;
    }

    private void AllFriends()
    {
        IncomingRequestsActive = false;
        OutgoingRequestsActive = false;
        AddFriendsActive = false;
    }
}
