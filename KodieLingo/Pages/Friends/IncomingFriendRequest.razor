@using Model;
@using Services
@using Data;
@using Microsoft.EntityFrameworkCore;

@inject ClientStateService ClientState
@inject IDbContextFactory<DatabaseContext> ContextFactory;

<div class="user-info">
  <h4>@User.Username</h4>
  <button class="custom-button" @onclick="AcceptRequest">Accept</button>
</div>

<style>
  /* CSS for centering the text in h4 */
  .user-info {
    color: white;
    text-align: center;
  }

  /* CSS for styling the button */
  .custom-button {
    width: 100%;
    border: none;
    border-radius: 25px; /* Make the button round */
    padding: 10px 20px; /* Add padding inside the button */
    cursor: pointer;
	background-color: #00c32e; /* Default background color */
    color: white; /* Text color */
    transition: background-color 0.3s ease; /* Smooth transition for background color */
  }

  /* Change button background color on hover */
  .custom-button:hover {
	background-color: #00c32e; /* Darker color on hover */
  }
</style>

@code {
	[Parameter]
	public User? User { get; set; }

	private DatabaseContext? db { get; set; }

	protected override async Task OnInitializedAsync()
	{
		db ??= await ContextFactory.CreateDbContextAsync();
	}

	private async Task AcceptRequest()
	{
		User mainUser = db.Users.Include(x => x.FriendReqOutgoing).Include(x => x.Friend).First(x => x.Id == ClientState.User.Id);
		User targetUser = db.Users.Include(x => x.FriendReqIncoming).Include(x => x.Friend).First(x => x.Id == User.Id);

		// Delete the request
		mainUser.FriendReqOutgoing.Remove(targetUser);
		targetUser.FriendReqIncoming.Remove(mainUser);

		mainUser.Friend.Add(targetUser);
		await db.SaveChangesAsync();

		ClientState.User = ClientState.GetUser(mainUser.Email);

		StateHasChanged();
	}
}
