@using Model;
@using Services
@using Data;
@using Microsoft.EntityFrameworkCore;

@inject ClientStateService ClientState
@inject IDbContextFactory<DatabaseContext> ContextFactory;

<h4 style="color:white; align-content:center;">@User.Username</h4>
<button style="width:100%;" @onclick="AcceptRequest">Accept</button>

@code {
	[Parameter]
	public User? User { get; set; }

	private DatabaseContext? db { get; set; }

	protected override async Task OnInitializedAsync()
	{
		db ??= await ContextFactory.CreateDbContextAsync();
	}

	private async Task AcceptRequest()
	{
		User mainUser = db.Users.Include(x => x.FriendReqOutgoing).Include(x => x.Friend).First(x => x.Id == ClientState.User.Id);
		User targetUser = db.Users.Include(x => x.FriendReqIncoming).Include(x => x.Friend).First(x => x.Id == User.Id);

		// Delete the request
		mainUser.FriendReqOutgoing.Remove(targetUser);
		targetUser.FriendReqIncoming.Remove(mainUser);

		mainUser.Friend.Add(targetUser);
		await db.SaveChangesAsync();

		ClientState.User = ClientState.GetUser(mainUser.Email);

		StateHasChanged();
	}
}
